# TIME COMPLEXITY = 0(M+N)
# Like the Naive Algorithm, the Rabin-Karp algorithm also check every substring. But unlike the Naive algorithm, the Rabin Karp algorithm matches the hash value of the pattern with the hash value of the current substring of text, and if the hash values match then only it starts matching individual characters.
import java.util.*;
class Main{
    public final static int d= 256;
    public static void Search(String text,String pat,int q){
        int M = pat.length();
        int N = text.length();
        int p = 0; //hash value of pat
        int t = 0; //hash value of text
        int h = 1;
        int i,j;
        
        for(i=0;i<M-1;i++)
            h = (d*h)%q;
      
      
        
        for(i=0;i<M;i++){
            p = (d*p+pat.charAt(i))%q;
            t = (d*t+text.charAt(i))%q;
        }
        
        
        
        for(i=0;i<=N-M;i++){
            
            
            # includes two conditions
            # if hash value matches,chk characters one by one
            if(p==t){
                for(j=0;j<M;j++){
                    if(text.charAt(i+j)!=pat.charAt(j)){
                        break;
                    }
            }
                if(j==M){
                    System.out.println("Pattern found at "+i);
                }
            }
                
        # careful with the closing brackets
             
                # iterarte each hash value to move to the other....
                # this two includes two conditions
            if (i < N - M) {
               t = (d * (t - text.charAt(i) * h) + text.charAt(i + M)) % q;
              if (t < 0)
                  t = t + q;
            } 
            
            
            
        }
    }
    public static void main(String [] args){
        String text = "PRITHIKAPRITHIKAPRITHIKA";
        String pat = "PRI";
        int q = 101;
        Search(text,pat,q);
    }
}
